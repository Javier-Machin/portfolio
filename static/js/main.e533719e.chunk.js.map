{"version":3,"sources":["components/Header.js","components/Navbar.js","components/About.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","header","_templateObject","Header","react_default","a","createElement","Component","Navbar","_this","this","navOffset","document","getElementById","offsetTop","window","addEventListener","props","handleScroll","_this2","removeEventListener","NavContainer","nav","Navbar_templateObject","navPosition","id","ImgContainer","div","About_templateObject","AboutText","p","_templateObject2","About","AboutContainer","section","_templateObject3","aboutHeight","ProjectsContainer","Projects_templateObject","ProjectDetailed","Projects_templateObject2","Project","Projects_templateObject3","Projects","_templateObject4","MainContainer","App_templateObject","App","App_templateObject2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","pageYOffset","setState","components_Header","components_Navbar","components_About","components_Projects","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qaAIA,IAAMA,EAAkBC,IAAOC,OAAVC,KAiBNC,mLARX,OACEC,EAAAC,EAAAC,cAACP,EAAD,sBAHeQ,kQCuBNC,8LA7BO,IAAAC,EAAAC,KAEZC,EADSC,SAASC,eAAe,UACdC,UACzBC,OAAOC,iBAAiB,SAAU,kBAAMP,EAAKQ,MAAMC,aAAaP,oDAG3C,IAAAQ,EAAAT,KACrBK,OAAOK,oBAAoB,SAAU,kBAAMD,EAAKF,MAAMC,aAAa,uCAInE,IAAMG,EAAerB,IAAOsB,IAAVC,IAGJb,KAAKO,MAAMO,aAOzB,OACEpB,EAAAC,EAAAC,cAACe,EAAD,CAAcI,GAAG,UAAjB,iBAxBelB,6hBCGrB,IAAMmB,EAAe1B,IAAO2B,IAAVC,KAIZC,EAAY7B,IAAO8B,EAAVC,KA+BAC,mLArBX,IAAMC,EAAiBjC,IAAOkC,QAAVC,IAORzB,KAAKO,MAAMmB,aAGvB,OACEhC,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAACoB,EAAD,sBACAtB,EAAAC,EAAAC,cAACuB,EAAD,6BAhBYtB,urBCbpB,IAAM8B,EAAoBrC,IAAOkC,QAAVI,KAcjBC,EAAkBvC,IAAO2B,IAAVa,KAMfC,EAAUzC,IAAO2B,IAAVe,KA6BEC,GAtBG3C,IAAO8B,EAAVc,sLAMX,OACExC,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAACiC,EAAD,yBAGAnC,EAAAC,EAAAC,cAACmC,EAAD,gBACArC,EAAAC,EAAAC,cAACmC,EAAD,gBACArC,EAAAC,EAAAC,cAACmC,EAAD,gBACArC,EAAAC,EAAAC,cAACmC,EAAD,gBACArC,EAAAC,EAAAC,cAACmC,EAAD,gBACArC,EAAAC,EAAAC,cAACmC,EAAD,wBAZelC,6TC3BvB,IAAMsC,EAAgB7C,IAAO2B,IAAVmB,KAmDJC,GA5CE/C,IAAO8B,EAAVkB,iBAQZ,SAAAD,EAAY9B,GAAO,IAAAR,EAAA,OAAAwC,OAAAC,EAAA,EAAAD,CAAAvC,KAAAqC,IACjBtC,EAAAwC,OAAAE,EAAA,EAAAF,CAAAvC,KAAAuC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3C,KAAMO,KACDqC,MAAQ,CACX9B,YAAa,SACbY,YAAa,SAGf3B,EAAKS,aAAeT,EAAKS,aAAaqC,KAAlBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAxC,KAPHA,4EAUNE,GACPI,OAAO0C,aAAe9C,EACxBD,KAAKgD,SAAS,CACZlC,YAAa,QACbY,YAAa,UAGf1B,KAAKgD,SAAS,CACZlC,YAAa,SACbY,YAAa,2CAMjB,OACEhC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAQ1C,aAAcR,KAAKQ,aAAcM,YAAad,KAAK4C,MAAM9B,cACjEpB,EAAAC,EAAAC,cAACuD,EAAD,CAAOzB,YAAa1B,KAAK4C,MAAMlB,cAC/BhC,EAAAC,EAAAC,cAACwD,EAAD,cAhCUvD,cCTEwD,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASzD,SAASC,eAAe,SDwH3C,kBAAmByD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e533719e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nconst HeaderContainer = styled.header`\n  text-transform: uppercase;\n  background-color: orangered;\n  color: green;\n  height: 100vh;\n`\n\nclass Header extends Component {\n  render() {\n    return (\n      <HeaderContainer>\n        Header\n      </HeaderContainer>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nclass Navbar extends Component {\n  \n  componentDidMount() {\n    const navbar = document.getElementById(\"navbar\");\n    const navOffset = navbar.offsetTop;\n    window.addEventListener('scroll', () => this.props.handleScroll(navOffset));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', () => this.props.handleScroll(\"\"));\n  }\n\n  render() {\n    const NavContainer = styled.nav`\n      text-transform: uppercase;\n      background-color: brown;\n      position: ${this.props.navPosition};\n      top: 0;\n      width: 100%;\n      color: violet;\n      height: 5rem;\n    `; \n\n    return (\n      <NavContainer id=\"navbar\">\n        Navbar\n      </NavContainer>\n    );\n  }\n}\n\nexport default Navbar;\n\n\n// // Get the navbar\n// var navbar = document.getElementById(\"navbar\");\n\n// // Get the offset position of the navbar\n// var sticky = navbar.offsetTop;\n\n// // Add the sticky class to the navbar when you reach its scroll position. Remove \"sticky\" when you leave the scroll position\n// function myFunction() {\n//   if (window.pageYOffset >= sticky) {\n//     navbar.classList.add(\"sticky\")\n//   } else {\n//     navbar.classList.remove(\"sticky\");\n//   }\n// }","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\n\n\nconst ImgContainer = styled.div`\n  padding: 3rem 2rem;\n`;\n\nconst AboutText = styled.p`\n  text-transform: uppercase;\n  color: green;\n  padding: 3rem 2rem;\n  text-align: left;\n`\n\nclass About extends Component {\n  render() {\n    \n    const AboutContainer = styled.section`\n      box-sizing: border-box;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: lightblue;\n      padding: 10rem 5rem;\n      height: ${this.props.aboutHeight};\n    `;\n\n    return (\n      <AboutContainer>\n        <ImgContainer>img container</ImgContainer>\n        <AboutText>\n          aboutme text\n        </AboutText>\n      </AboutContainer>\n    );\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nconst ProjectsContainer = styled.section`\n  display: grid;\n  grid-template-areas:\n    \"det det det\"\n    \"det det det\"\n    \"1fr 1fr 1fr\"\n    \"1fr 1fr 1fr\";\n  align-items: center;\n  background-color: pink;\n  width: 65%;\n  height: 100vh;\n  margin: 0 auto;\n`;\n\nconst ProjectDetailed = styled.div`\n  grid-area: det;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Project = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: lightgreen;\n  border: 1px solid black;\n`\n\nconst AboutText = styled.p`\n  text-transform: uppercase;\n`\n\nclass Projects extends Component {\n  render() {\n    return (\n      <ProjectsContainer>\n        <ProjectDetailed>\n          Project Detailed\n        </ProjectDetailed>\n        <Project>Project</Project>\n        <Project>Project</Project>\n        <Project>Project</Project>\n        <Project>Project</Project>\n        <Project>Project</Project>\n        <Project>Project</Project>\n      </ProjectsContainer>\n    );\n  }\n}\n\nexport default Projects;","import React, { Component } from 'react';\nimport './css/App.css';\nimport styled from 'styled-components';\nimport Header from './components/Header';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Projects from './components/Projects';\n\nconst MainContainer = styled.div`\n  text-align: center;\n  color: blue;\n  font-size: 3rem;\n  background-color: palevioletred;\n`;\n\nconst SomeText = styled.p`\n  text-transform: uppercase;\n  color: red;\n  text-align: left;\n`;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      navPosition: \"static\",\n      aboutHeight: \"50rem\"\n    };\n\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  handleScroll(navOffset) {\n    if (window.pageYOffset >= navOffset) {\n      this.setState({ \n        navPosition: \"fixed\",\n        aboutHeight: \"55rem\"\n      });\n    } else {\n      this.setState({ \n        navPosition: \"static\",\n        aboutHeight: \"50rem\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <MainContainer>\n        <Header />\n        <Navbar handleScroll={this.handleScroll} navPosition={this.state.navPosition} />\n        <About aboutHeight={this.state.aboutHeight} />\n        <Projects />\n      </MainContainer>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}